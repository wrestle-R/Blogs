---
import Layout from '../layouts/Layout.astro';
---

<Layout >
  <div class="container mx-auto px-4 py-8 max-w-4xl">
    <div class="mb-8 text-center">
      <h1 class="text-3xl font-bold mb-2 bg-gradient-to-r from-foreground to-muted-foreground bg-clip-text text-transparent">My Spotify</h1>
      <p class="text-sm text-muted-foreground">Real-time music stats and listening history</p>
    </div>
    
    <div id="loading-section" class="text-center py-16">
      <div class="inline-block animate-spin rounded-full h-10 w-10 border-2 border-primary border-t-transparent"></div>
      <p class="mt-3 text-sm text-muted-foreground">Loading your music...</p>
    </div>

    <div id="error-section" class="hidden mb-6">
      <div class="bg-destructive/10 border border-destructive/20 rounded-lg p-4 text-center">
        <h2 class="text-lg font-semibold mb-1">Error</h2>
        <p id="error-message" class="text-sm text-muted-foreground mb-3"></p>
        <button 
          id="retry-button"
          class="inline-flex items-center gap-2 px-4 py-2 bg-primary text-primary-foreground text-sm font-medium rounded-md hover:opacity-90 transition-opacity"
        >
          Retry
        </button>
      </div>
    </div>

    <div id="content-section" class="hidden space-y-6">
      <div id="now-playing-section" class="rounded-lg border bg-card p-6">
        <h2 class="text-lg font-semibold mb-4 flex items-center gap-2">
          <svg class="w-5 h-5 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          Now Playing
        </h2>
        
        <div id="now-playing-card" class="hidden">
          <div class="flex gap-4 items-start">
            <img 
              id="album-art" 
              src="" 
              alt="Album Art" 
              class="w-24 h-24 rounded-md shadow-md object-cover flex-shrink-0"
            />
            
            <div class="flex-1 min-w-0">
              <div class="mb-2">
                <span class="inline-flex items-center gap-1.5 px-2 py-1 bg-primary/10 text-primary text-xs font-medium rounded-full">
                  <span class="inline-block w-1.5 h-1.5 bg-primary rounded-full animate-pulse"></span>
                  Playing
                </span>
              </div>
              
              <h3 id="song-name" class="text-xl font-bold mb-1 truncate"></h3>
              <p id="artist-name" class="text-sm text-muted-foreground mb-1 truncate"></p>
              <p id="album-name" class="text-xs text-muted-foreground/70 truncate"></p>
              
              <div class="mt-3 space-y-2">
                <div class="flex items-center gap-2 text-xs">
                  <span id="current-time" class="text-muted-foreground">0:00</span>
                  <div class="flex-1 bg-muted rounded-full h-1 overflow-hidden">
                    <div id="progress-bar" class="bg-primary h-full transition-all duration-300" style="width: 0%"></div>
                  </div>
                  <span id="total-time" class="text-muted-foreground">0:00</span>
                </div>
              </div>
              
              <a 
                id="spotify-link" 
                href="" 
                target="_blank" 
                rel="noopener noreferrer"
                class="mt-3 inline-flex items-center gap-1.5 text-xs text-primary hover:underline"
              >
                Open in Spotify
                <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                </svg>
              </a>
            </div>
          </div>
        </div>

        <div id="not-playing-card" class="hidden text-center py-8">
          <svg class="w-12 h-12 mx-auto mb-3 text-muted-foreground/50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3" />
          </svg>
          <p class="text-sm text-muted-foreground">Nothing playing right now</p>
        </div>
      </div>

      <div class="rounded-lg border bg-card">
        <div class="flex items-center justify-between p-4 border-b bg-muted/30">
          <h2 class="text-lg font-semibold">My Music</h2>
          <div class="flex gap-1 p-1 bg-muted rounded-md" role="tablist">
            <button
              class="view-toggle px-3 py-1.5 text-xs font-medium rounded transition-all"
              data-view="tracks"
              data-active="true"
            >
              Tracks
            </button>
            <button
              class="view-toggle px-3 py-1.5 text-xs font-medium rounded transition-all"
              data-view="artists"
              data-active="false"
            >
              Artists
            </button>
            <button
              class="view-toggle px-3 py-1.5 text-xs font-medium rounded transition-all"
              data-view="playlists"
              data-active="false"
            >
              Playlists
            </button>
          </div>
        </div>

        <div class="p-4">
          <div id="tracks-view" class="view-content" data-active="true">
            <div id="top-tracks-list" class="space-y-2"></div>
          </div>

          <div id="artists-view" class="view-content hidden" data-active="false">
            <div id="top-artists-list" class="space-y-2"></div>
          </div>

          <div id="playlists-view" class="view-content hidden" data-active="false">
            <div id="playlists-list" class="space-y-2"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  const API_BASE_URL = 'https://blogsbackend.vidyoyo.workers.dev';
  
  const formatTime = (ms: number) => {
    const minutes = Math.floor(ms / 60000);
    const seconds = Math.floor((ms % 60000) / 1000);
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };

  const hideLoading = () => {
    document.getElementById('loading-section')?.classList.add('hidden');
  };

  const showError = (message: string) => {
    hideLoading();
    document.getElementById('error-section')?.classList.remove('hidden');
    const errorMsg = document.getElementById('error-message');
    if (errorMsg) errorMsg.textContent = message;
  };

  const showContent = () => {
    hideLoading();
    document.getElementById('error-section')?.classList.add('hidden');
    document.getElementById('content-section')?.classList.remove('hidden');
  };

  const updateNowPlaying = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/now-playing`);
      
      if (!response.ok) {
        throw new Error('Failed to fetch now playing');
      }

      const data = await response.json();

      if (!data.isPlaying || !data.name) {
        document.getElementById('now-playing-card')?.classList.add('hidden');
        document.getElementById('not-playing-card')?.classList.remove('hidden');
        return;
      }

      document.getElementById('not-playing-card')?.classList.add('hidden');
      document.getElementById('now-playing-card')?.classList.remove('hidden');

      const albumArt = document.getElementById('album-art') as HTMLImageElement;
      const songName = document.getElementById('song-name');
      const artistName = document.getElementById('artist-name');
      const albumName = document.getElementById('album-name');
      const spotifyLink = document.getElementById('spotify-link') as HTMLAnchorElement;
      const progressBar = document.getElementById('progress-bar') as HTMLDivElement;
      const currentTime = document.getElementById('current-time');
      const totalTime = document.getElementById('total-time');

      if (albumArt) albumArt.src = data.albumArt || '';
      if (songName) songName.textContent = data.name;
      if (artistName) artistName.textContent = data.artist;
      if (albumName) albumName.textContent = data.album;
      if (spotifyLink) spotifyLink.href = data.songUrl;

      const progress = (data.progress / data.duration) * 100;
      if (progressBar) progressBar.style.width = `${progress}%`;
      if (currentTime) currentTime.textContent = formatTime(data.progress);
      if (totalTime) totalTime.textContent = formatTime(data.duration);
    } catch (error) {
      console.error('Error updating now playing:', error);
      document.getElementById('now-playing-card')?.classList.add('hidden');
      document.getElementById('not-playing-card')?.classList.remove('hidden');
    }
  };

  const loadTopTracks = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/top-tracks`);
      
      if (!response.ok) {
        throw new Error('Failed to fetch top tracks');
      }
      
      const data = await response.json();
      
      if (data.tracks && data.tracks.length > 0) {
        const tracksList = document.getElementById('top-tracks-list');
        
        if (tracksList) {
          tracksList.innerHTML = data.tracks.map((track: {
            albumArt: string;
            name: string;
            artist: string;
            songUrl: string;
            popularity: number;
          }, index: number) => `
            <div class="flex items-center gap-4 p-4 bg-white/5 hover:bg-white/10 rounded-lg transition-colors group">
              <span class="text-2xl font-bold opacity-30 w-8">${index + 1}</span>
              <img src="${track.albumArt}" alt="${track.name}" class="w-16 h-16 rounded shadow-lg" />
              <div class="flex-1 min-w-0">
                <h3 class="font-semibold truncate">${track.name}</h3>
                <p class="text-sm opacity-70 truncate">${track.artist}</p>
              </div>
              <div class="flex items-center gap-2">
                <div class="hidden md:block w-20">
                  <div class="bg-white/10 rounded-full h-1.5 overflow-hidden">
                    <div class="bg-purple-500 h-full" style="width: ${track.popularity}%"></div>
                  </div>
                </div>
                <a 
                  href="${track.songUrl}" 
                  target="_blank" 
                  rel="noopener noreferrer"
                  class="p-2 hover:bg-white/10 rounded-full transition-colors opacity-0 group-hover:opacity-100"
                  title="Open in Spotify"
                >
                  <svg class="w-5 h-5 text-green-500" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.779-.179-.899-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.301 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.54.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.419 1.56-.299.421-1.02.599-1.559.3z"/>
                </svg>
                </a>
              </div>
            </div>
          `).join('');
        }
      }
    } catch (error) {
      console.error('Error loading top tracks:', error);
    }
  };

  const loadTopArtists = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/top-artists`);
      
      if (!response.ok) {
        throw new Error('Failed to fetch top artists');
      }
      
      const data = await response.json();
      
      if (data.artists && data.artists.length > 0) {
        const artistsList = document.getElementById('top-artists-list');
        
        if (artistsList) {
          artistsList.innerHTML = data.artists.map((artist: any, index: number) => `
            <div class="flex items-center gap-4 p-4 bg-white/5 hover:bg-white/10 rounded-lg transition-colors group">
              <span class="text-2xl font-bold opacity-30 w-8">${index + 1}</span>
              <img src="${artist.image}" alt="${artist.name}" class="w-16 h-16 rounded-full shadow-lg object-cover" />
              <div class="flex-1 min-w-0">
                <h3 class="font-semibold truncate">${artist.name}</h3>
                <p class="text-sm opacity-70 truncate">${artist.genres.slice(0, 2).join(', ') }</p>
              </div>
              <div class="flex items-center gap-2">
                <div class="hidden md:block w-20">
                  <div class="bg-white/10 rounded-full h-1.5 overflow-hidden">
                    <div class="bg-blue-500 h-full" style="width: ${artist.popularity}%"></div>
                  </div>
                </div>
                <a 
                  href="${artist.url}" 
                  target="_blank" 
                  rel="noopener noreferrer"
                  class="p-2 hover:bg-white/10 rounded-full transition-colors opacity-0 group-hover:opacity-100"
                  title="Open in Spotify"
                >
                  <svg class="w-5 h-5 text-green-500" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.779-.179-.899-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.301 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.54.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.419 1.56-.299.421-1.02.599-1.559.3z"/>
                </svg>
                </a>
              </div>
            </div>
          `).join('');
        }
      }
    } catch (error) {
      console.error('Error loading top artists:', error);
    }
  };

  const loadPlaylists = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/playlists`);
      if (!response.ok) {
        throw new Error('Failed to fetch playlists');
      }
      const data = await response.json();
      if (data.playlists && data.playlists.length > 0) {
        const playlistsList = document.getElementById('playlists-list');
        if (playlistsList) {
          // Show only top 10 playlists
          playlistsList.innerHTML = data.playlists.slice(0, 10).map((playlist: {
            image: string;
            name: string;
            trackCount: number;
            isCollaborative: boolean;
            isPublic: boolean;
            url: string;
          }, index: number) => `
            <div class="flex items-center gap-3 p-3 rounded-md hover:bg-muted/50 transition-colors group">
              <span class="text-lg font-bold text-muted-foreground/30 w-6">${index + 1}</span>
              <img src="${playlist.image || '/placeholder.png'}" alt="${playlist.name}" class="w-12 h-12 rounded shadow-sm" />
              <div class="flex-1 min-w-0">
                <h3 class="text-sm font-semibold truncate">${playlist.name}</h3>
                <p class="text-xs text-muted-foreground truncate">
                  ${playlist.trackCount} tracks${playlist.isCollaborative ? ' • Collaborative' : ''}${!playlist.isPublic ? ' • Private' : ''}
                </p>
              </div>
              <a 
                href="${playlist.url}" 
                target="_blank" 
                rel="noopener noreferrer"
                class="p-1.5 hover:bg-muted rounded-md transition-colors opacity-0 group-hover:opacity-100"
                title="Open in Spotify"
              >
                <svg class="w-4 h-4 text-primary" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.779-.179-.899-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.301 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.54.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.419 1.56-.299.421-1.02.599-1.559.3z"/>
                </svg>
              </a>
            </div>
          `).join('');
        }
      }
    } catch (error) {
      console.error('Error loading playlists:', error);
    }
  };

  const loadAllData = async () => {
    try {
      showContent();
      await Promise.all([
        updateNowPlaying(),
        loadTopTracks(),
        loadTopArtists(),
        loadPlaylists()
      ]);
    } catch (error) {
      showError(error instanceof Error ? error.message : 'Failed to load Spotify data');
    }
  };

  const toggleButtons = document.querySelectorAll('.view-toggle');
  const viewContents = document.querySelectorAll('.view-content');

  toggleButtons.forEach((button) => {
    button.addEventListener('click', () => {
      const viewName = button.getAttribute('data-view');
      toggleButtons.forEach((btn) => {
        const isActive = btn.getAttribute('data-view') === viewName;
        btn.setAttribute('data-active', isActive.toString());
      });
      viewContents.forEach((content) => {
        const contentView = content.id.replace('-view', '').replace('top-', '');
        if (contentView === viewName) {
          content.setAttribute('data-active', 'true');
          content.classList.remove('hidden');
        } else {
          content.setAttribute('data-active', 'false');
          content.classList.add('hidden');
        }
      });
    });
  });

  document.getElementById('retry-button')?.addEventListener('click', loadAllData);

  loadAllData();
  
  setInterval(updateNowPlaying, 5000);
</script>

<style>
  /* Hardcoded theme colors from global.css */
  .view-toggle[data-active="true"] {
    background: oklch(0.995 0 0); /* --background */
    color: oklch(0.2 0 0);        /* --foreground */
    box-shadow: 0 2px 8px 0 oklch(0.9 0 0); /* --border */
    font-weight: 600;
    transition: background 0.2s, color 0.2s;
  }
  .view-toggle[data-active="false"] {
    background: transparent;
    color: oklch(0.5 0 0); /* --muted-foreground */
    transition: color 0.2s;
  }
  .view-toggle[data-active="false"]:hover {
    color: oklch(0.2 0 0); /* --foreground */
  }
  .view-toggle {
    border-radius: 0.5rem;
    padding: 0.375rem 1rem;
    font-size: 0.875rem;
    margin: 0 0.125rem;
    cursor: pointer;
    border: none;
    outline: none;
  }
  .view-content {
    animation: fadeIn 0.3s ease-in-out;
  }
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(4px);}
    to   { opacity: 1; transform: translateY(0);}
  }
</style>
</Layout>

<script>
  const API_BASE_URL = 'https://blogsbackend.vidyoyo.workers.dev';
  
  const formatTime = (ms: number) => {
    const minutes = Math.floor(ms / 60000);
    const seconds = Math.floor((ms % 60000) / 1000);
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };

  const hideLoading = () => {
    document.getElementById('loading-section')?.classList.add('hidden');
  };

  const showError = (message: string) => {
    hideLoading();
    document.getElementById('error-section')?.classList.remove('hidden');
    const errorMsg = document.getElementById('error-message');
    if (errorMsg) errorMsg.textContent = message;
  };

  const showContent = () => {
    hideLoading();
    document.getElementById('error-section')?.classList.add('hidden');
    document.getElementById('content-section')?.classList.remove('hidden');
  };

  const updateNowPlaying = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/now-playing`);
      
      if (!response.ok) {
        throw new Error('Failed to fetch now playing');
      }

      const data = await response.json();

      if (!data.isPlaying || !data.name) {
        document.getElementById('now-playing-card')?.classList.add('hidden');
        document.getElementById('not-playing-card')?.classList.remove('hidden');
        return;
      }

      document.getElementById('not-playing-card')?.classList.add('hidden');
      document.getElementById('now-playing-card')?.classList.remove('hidden');

      const albumArt = document.getElementById('album-art') as HTMLImageElement;
      const songName = document.getElementById('song-name');
      const artistName = document.getElementById('artist-name');
      const albumName = document.getElementById('album-name');
      const spotifyLink = document.getElementById('spotify-link') as HTMLAnchorElement;
      const progressBar = document.getElementById('progress-bar') as HTMLDivElement;
      const currentTime = document.getElementById('current-time');
      const totalTime = document.getElementById('total-time');

      if (albumArt) albumArt.src = data.albumArt || '';
      if (songName) songName.textContent = data.name;
      if (artistName) artistName.textContent = data.artist;
      if (albumName) albumName.textContent = data.album;
      if (spotifyLink) spotifyLink.href = data.songUrl;

      const progress = (data.progress / data.duration) * 100;
      if (progressBar) progressBar.style.width = `${progress}%`;
      if (currentTime) currentTime.textContent = formatTime(data.progress);
      if (totalTime) totalTime.textContent = formatTime(data.duration);
    } catch (error) {
      console.error('Error updating now playing:', error);
      document.getElementById('now-playing-card')?.classList.add('hidden');
      document.getElementById('not-playing-card')?.classList.remove('hidden');
    }
  };

  const loadTopTracks = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/top-tracks`);
      
      if (!response.ok) {
        throw new Error('Failed to fetch top tracks');
      }
      
      const data = await response.json();
      
      if (data.tracks && data.tracks.length > 0) {
        const tracksList = document.getElementById('top-tracks-list');
        
        if (tracksList) {
          tracksList.innerHTML = data.tracks.map((track: {
            albumArt: string;
            name: string;
            artist: string;
            songUrl: string;
            popularity: number;
          }, index: number) => `
            <div class="flex items-center gap-4 p-4 bg-white/5 hover:bg-white/10 rounded-lg transition-colors group">
              <span class="text-2xl font-bold opacity-30 w-8">${index + 1}</span>
              <img src="${track.albumArt}" alt="${track.name}" class="w-16 h-16 rounded shadow-lg" />
              <div class="flex-1 min-w-0">
                <h3 class="font-semibold truncate">${track.name}</h3>
                <p class="text-sm opacity-70 truncate">${track.artist}</p>
              </div>
              <div class="flex items-center gap-2">
                <div class="hidden md:block w-20">
                  <div class="bg-white/10 rounded-full h-1.5 overflow-hidden">
                    <div class="bg-purple-500 h-full" style="width: ${track.popularity}%"></div>
                  </div>
                </div>
                <a 
                  href="${track.songUrl}" 
                  target="_blank" 
                  rel="noopener noreferrer"
                  class="p-2 hover:bg-white/10 rounded-full transition-colors opacity-0 group-hover:opacity-100"
                  title="Open in Spotify"
                >
                  <svg class="w-5 h-5 text-green-500" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.779-.179-.899-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.301 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.54.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.419 1.56-.299.421-1.02.599-1.559.3z"/>
                </svg>
                </a>
              </div>
            </div>
          `).join('');
        }
      }
    } catch (error) {
      console.error('Error loading top tracks:', error);
    }
  };

  const loadTopArtists = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/top-artists`);
      
      if (!response.ok) {
        throw new Error('Failed to fetch top artists');
      }
      
      const data = await response.json();
      
      if (data.artists && data.artists.length > 0) {
        const artistsList = document.getElementById('top-artists-list');
        
        if (artistsList) {
          artistsList.innerHTML = data.artists.map((artist: any, index: number) => `
            <div class="flex items-center gap-4 p-4 bg-white/5 hover:bg-white/10 rounded-lg transition-colors group">
              <span class="text-2xl font-bold opacity-30 w-8">${index + 1}</span>
              <img src="${artist.image}" alt="${artist.name}" class="w-16 h-16 rounded-full shadow-lg object-cover" />
              <div class="flex-1 min-w-0">
                <h3 class="font-semibold truncate">${artist.name}</h3>
                <p class="text-sm opacity-70 truncate">${artist.genres.slice(0, 2).join(', ') || 'No genres'}</p>
              </div>
              <div class="flex items-center gap-2">
                <div class="hidden md:block w-20">
                  <div class="bg-white/10 rounded-full h-1.5 overflow-hidden">
                    <div class="bg-blue-500 h-full" style="width: ${artist.popularity}%"></div>
                  </div>
                </div>
                <a 
                  href="${artist.url}" 
                  target="_blank" 
                  rel="noopener noreferrer"
                  class="p-2 hover:bg-white/10 rounded-full transition-colors opacity-0 group-hover:opacity-100"
                  title="Open in Spotify"
                >
                  <svg class="w-5 h-5 text-green-500" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.779-.179-.899-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.301 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.54.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.419 1.56-.299.421-1.02.599-1.559.3z"/>
                </svg>
                </a>
              </div>
            </div>
          `).join('');
        }
      }
    } catch (error) {
      console.error('Error loading top artists:', error);
    }
  };

  const loadPlaylists = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/playlists`);
      if (!response.ok) {
        throw new Error('Failed to fetch playlists');
      }
      const data = await response.json();
      if (data.playlists && data.playlists.length > 0) {
        const playlistsList = document.getElementById('playlists-list');
        if (playlistsList) {
          // Show only top 10 playlists
          playlistsList.innerHTML = data.playlists.slice(0, 10).map((playlist: {
            image: string;
            name: string;
            trackCount: number;
            isCollaborative: boolean;
            isPublic: boolean;
            url: string;
          }, index: number) => `
            <div class="flex items-center gap-3 p-3 rounded-md hover:bg-muted/50 transition-colors group">
              <span class="text-lg font-bold text-muted-foreground/30 w-6">${index + 1}</span>
              <img src="${playlist.image || '/placeholder.png'}" alt="${playlist.name}" class="w-12 h-12 rounded shadow-sm" />
              <div class="flex-1 min-w-0">
                <h3 class="text-sm font-semibold truncate">${playlist.name}</h3>
                <p class="text-xs text-muted-foreground truncate">
                  ${playlist.trackCount} tracks${playlist.isCollaborative ? ' • Collaborative' : ''}${!playlist.isPublic ? ' • Private' : ''}
                </p>
              </div>
              <a 
                href="${playlist.url}" 
                target="_blank" 
                rel="noopener noreferrer"
                class="p-1.5 hover:bg-muted rounded-md transition-colors opacity-0 group-hover:opacity-100"
                title="Open in Spotify"
              >
                <svg class="w-4 h-4 text-primary" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.779-.179-.899-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.301 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.54.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.419 1.56-.299.421-1.02.599-1.559.3z"/>
                </svg>
              </a>
            </div>
          `).join('');
        }
      }
    } catch (error) {
      console.error('Error loading playlists:', error);
    }
  };

  const loadAllData = async () => {
    try {
      showContent();
      await Promise.all([
        updateNowPlaying(),
        loadTopTracks(),
        loadTopArtists(),
        loadPlaylists()
      ]);
    } catch (error) {
      showError(error instanceof Error ? error.message : 'Failed to load Spotify data');
    }
  };

  document.getElementById('retry-button')?.addEventListener('click', loadAllData);

  loadAllData();
  
  setInterval(updateNowPlaying, 5000);
</script>

<style>
  @keyframes spin {
    to { transform: rotate(360deg); }
  }
  
  .animate-spin {
    animation: spin 1s linear infinite;
  }
  
  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
  }
  
  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
</style>
