---
import BlogCard from '@/components/BlogCard.astro'
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import PageHead from '@/components/PageHead.astro'
import PaginationComponent from '@/components/ui/pagination'
import { SITE } from '@/consts'
import Layout from '@/layouts/Layout.astro'
import { getAllPosts, groupPostsByYear } from '@/lib/data-utils'
import type { PaginateFunction } from 'astro'

export async function getStaticPaths({
  paginate,
}: {
  paginate: PaginateFunction
}) {
  const allPosts = await getAllPosts()
  return paginate(allPosts, { pageSize: SITE.postsPerPage })
}

const { page } = Astro.props

const postsByYear = groupPostsByYear(page.data)
const years = Object.keys(postsByYear).sort((a, b) => parseInt(b) - parseInt(a))

const myPosts = page.data.filter((post: any) => post.data.authors?.includes('russel'))
const myPostsByYear = groupPostsByYear(myPosts)
const myYears = Object.keys(myPostsByYear).sort((a, b) => parseInt(b) - parseInt(a))

const collaboratorPosts = page.data.filter((post: any) => !post.data.authors?.includes('russel'))
const collaboratorPostsByYear = groupPostsByYear(collaboratorPosts)
const collaboratorYears = Object.keys(collaboratorPostsByYear).sort((a, b) => parseInt(b) - parseInt(a))
---

<Layout class="max-w-4xl">
  <PageHead slot="head" title="Blog" />
  <Breadcrumbs
    items={[
      { label: 'Blog', href: '/blog', icon: 'lucide:library-big' },
      { label: `Page ${page.currentPage}`, icon: 'lucide:book-copy' },
    ]}
  />

  <div class="rounded-lg border bg-card">
    <div class="border-b bg-muted/30">
      <div class="flex gap-1 p-1" role="tablist">
        <button
          class="tab-button flex items-center gap-2 px-4 py-2.5 text-sm font-medium rounded-md transition-all hover:bg-background/60 data-[active=true]:bg-background data-[active=true]:shadow-sm"
          data-tab="all"
          data-active="true"
          role="tab"
        >
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
          </svg>
          All Posts
        </button>
        <button
          class="tab-button flex items-center gap-2 px-4 py-2.5 text-sm font-medium rounded-md transition-all hover:bg-background/60 data-[active=true]:bg-background data-[active=true]:shadow-sm"
          data-tab="mine"
          data-active="false"
          role="tab"
        >
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
          </svg>
          Mine
        </button>
        <button
          class="tab-button flex items-center gap-2 px-4 py-2.5 text-sm font-medium rounded-md transition-all hover:bg-background/60 data-[active=true]:bg-background data-[active=true]:shadow-sm"
          data-tab="collaborators"
          data-active="false"
          role="tab"
        >
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"/>
          </svg>
          Collaborators
        </button>
      </div>
    </div>

    <div class="p-6">
      <div class="tab-content" data-tab-content="all" data-active="true">
        <div class="flex min-h-[calc(100vh-24rem)] flex-col gap-y-8">
          {
            years.map((year) => (
              <section class="flex flex-col gap-y-4">
                <div class="font-medium">{year}</div>
                <ul class="flex flex-col gap-4">
                  {postsByYear[year].map((post) => (
                    <li class="transform transition-all hover:scale-[1.01]">
                      <BlogCard entry={post} />
                    </li>
                  ))}
                </ul>
              </section>
            ))
          }
        </div>
      </div>

      <div class="tab-content hidden" data-tab-content="mine" data-active="false">
        {myPosts.length > 0 ? (
          <div class="flex min-h-[calc(100vh-24rem)] flex-col gap-y-8">
            {
              myYears.map((year) => (
                <section class="flex flex-col gap-y-4">
                  <div class="font-medium">{year}</div>
                  <ul class="flex flex-col gap-4">
                    {myPostsByYear[year].map((post) => (
                      <li class="transform transition-all hover:scale-[1.01]">
                        <BlogCard entry={post} />
                      </li>
                    ))}
                  </ul>
                </section>
              ))
            }
          </div>
        ) : (
          <div class="flex flex-col items-center justify-center py-12 text-center min-h-[calc(100vh-24rem)]">
            <svg class="w-12 h-12 text-muted-foreground/50 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
            </svg>
            <p class="text-muted-foreground">No posts from you on this page.</p>
          </div>
        )}
      </div>

      <div class="tab-content hidden" data-tab-content="collaborators" data-active="false">
        {collaboratorPosts.length > 0 ? (
          <div class="flex min-h-[calc(100vh-24rem)] flex-col gap-y-8">
            {
              collaboratorYears.map((year) => (
                <section class="flex flex-col gap-y-4">
                  <div class="font-medium">{year}</div>
                  <ul class="flex flex-col gap-4">
                    {collaboratorPostsByYear[year].map((post) => (
                      <li class="transform transition-all hover:scale-[1.01]">
                        <BlogCard entry={post} />
                      </li>
                    ))}
                  </ul>
                </section>
              ))
            }
          </div>
        ) : (
          <div class="flex flex-col items-center justify-center py-12 text-center min-h-[calc(100vh-24rem)]">
            <svg class="w-12 h-12 text-muted-foreground/50 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"/>
            </svg>
            <p class="text-muted-foreground mb-2">No collaborator posts on this page.</p>
            <p class="text-sm text-muted-foreground">Check other pages or invite friends!</p>
          </div>
        )}
      </div>
    </div>
  </div>

  <PaginationComponent
    currentPage={page.currentPage}
    totalPages={page.lastPage}
    baseUrl="/blog/"
    client:load
  />
</Layout>

<script>
  document.addEventListener('astro:page-load', () => {
    const tabButtons = document.querySelectorAll('.tab-button')
    const tabContents = document.querySelectorAll('.tab-content')

    tabButtons.forEach((button) => {
      button.addEventListener('click', () => {
        const tabName = button.getAttribute('data-tab')
        
        tabButtons.forEach((btn) => {
          btn.setAttribute('data-active', 'false')
        })
        button.setAttribute('data-active', 'true')

        tabContents.forEach((content) => {
          if (content.getAttribute('data-tab-content') === tabName) {
            content.setAttribute('data-active', 'true')
            content.classList.remove('hidden')
          } else {
            content.setAttribute('data-active', 'false')
            content.classList.add('hidden')
          }
        })
      })
    })
  })
</script>

<style>
  .tab-button {
    position: relative;
  }
  
  .tab-button[data-active="true"] {
    color: hsl(var(--foreground));
  }
  
  .tab-button[data-active="false"] {
    color: hsl(var(--muted-foreground));
  }

  .tab-content {
    animation: fadeIn 0.3s ease-in-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(4px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
