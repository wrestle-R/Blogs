---
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import Link from '@/components/Link.astro'
import PostHead from '@/components/PostHead.astro'
import SubpostsHeader from '@/components/SubpostsHeader.astro'
import SubpostsSidebar from '@/components/SubpostsSidebar.astro'
import TOCHeader from '@/components/TOCHeader.astro'
import TOCSidebar from '@/components/TOCSidebar.astro'
import { badgeVariants } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import Layout from '@/layouts/Layout.astro'
import {
  getAdjacentPosts,
  getAllPostsAndSubposts,
  getCombinedReadingTime,
  getParentId,
  getParentPost,
  getPostReadingTime,
  getSubpostCount,
  getTOCSections,
  hasSubposts,
  isSubpost,
  parseAuthors,
} from '@/lib/data-utils'
import { formatDate } from '@/lib/utils'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'
import { render } from 'astro:content'

export async function getStaticPaths() {
  const posts = await getAllPostsAndSubposts()
  
  // Filter out posts that have custom pages
  const customPages = ['sitcoms', 'voices-told-me-to-write', 'perfect-metaphor', 'not-accept-defeat']
  
  return posts
    .filter(post => !customPages.includes(post.id))
    .map((post) => ({
      params: { id: post.id },
      props: post,
    }))
}

const post = Astro.props
const currentPostId = Astro.params.id
const { Content, headings } = await render(post)
const authors = await parseAuthors(post.data.authors ?? [])

const isCurrentSubpost = isSubpost(currentPostId)
const navigation = await getAdjacentPosts(currentPostId)
const parentPost = isCurrentSubpost ? await getParentPost(currentPostId) : null

const hasChildPosts = await hasSubposts(currentPostId)
const subpostCount = !isCurrentSubpost
  ? await getSubpostCount(currentPostId)
  : 0
const postReadingTime = await getPostReadingTime(currentPostId)
const combinedReadingTime =
  hasChildPosts && !isCurrentSubpost
    ? await getCombinedReadingTime(currentPostId)
    : null

const tocSections = await getTOCSections(currentPostId)
---

<Layout>
  <PostHead slot="head" post={post} />
  {
    (hasChildPosts || isCurrentSubpost) && (
      <SubpostsHeader
        slot="subposts-navigation"
        parentId={isCurrentSubpost ? getParentId(currentPostId) : currentPostId}
      />
    )
  }
  {
    headings?.length > 0 &&
      !(
        isCurrentSubpost &&
        headings.length === 1 &&
        headings[0].text === post.data.title
      ) && <TOCHeader slot="table-of-contents" headings={headings} />
  }

  <section
    class="grid grid-cols-[minmax(0px,1fr)_min(calc(var(--breakpoint-md)-2rem),100%)_minmax(0px,1fr)] gap-y-8"
  >
    <div class="col-start-2 pt-4">
      <div class="flex items-center gap-3 text-sm text-muted-foreground mb-8 pb-3 border-b border-border/40">
        {
          authors.length > 0 && (
            <a href={`/authors/${authors[0].id}`} class="flex items-center gap-1.5 hover:text-foreground transition-colors">
              <Icon name="lucide:user" class="size-3.5" />
              <span>{authors[0].name}</span>
            </a>
          )
        }
        <span class="text-muted-foreground/40">•</span>
        <div class="flex items-center">
          <span>{formatDate(post.data.date)}</span>
        </div>
        {
          postReadingTime && (
            <>
              <span class="text-muted-foreground/40">•</span>
              <span class="text-muted-foreground/80">{postReadingTime}</span>
            </>
          )
        }
      </div>
      
      <h1 class="text-2xl font-semibold mb-8 text-foreground">{post.data.title}</h1>
    </div>

    {
      post.data.image && (
        <Image
          src={post.data.image}
          alt={post.data.title}
          width={1200}
          height={630}
          class="col-span-full mx-auto w-full max-w-5xl object-cover rounded-lg"
        />
      )
    }

    {
      tocSections.length > 0 && (
        <TOCSidebar sections={tocSections} currentPostId={currentPostId} />
      )
    }

    <article class="prose col-start-2 max-w-none">
      <Content />
    </article>

    {
      (hasChildPosts || isCurrentSubpost) && (
        <SubpostsSidebar
          parentId={
            isCurrentSubpost ? getParentId(currentPostId) : currentPostId
          }
          className="w-64"
        />
      )
    }
  </section>

  <Button
    variant="outline"
    size="icon"
    className="group fixed right-8 bottom-8 z-50 hidden"
    id="scroll-to-top"
    title="Scroll to top"
    aria-label="Scroll to top"
  >
    <Icon
      name="lucide:arrow-up"
      class="mx-auto size-4 transition-all group-hover:-translate-y-0.5"
    />
  </Button>

  <script>
    document.addEventListener('astro:page-load', () => {
      const scrollToTopButton = document.getElementById('scroll-to-top')
      const footer = document.querySelector('footer')

      if (scrollToTopButton && footer) {
        scrollToTopButton.addEventListener('click', () => {
          window.scrollTo({ top: 0, behavior: 'smooth' })
        })

        window.addEventListener('scroll', () => {
          const footerRect = footer.getBoundingClientRect()
          const isFooterVisible = footerRect.top <= window.innerHeight

          scrollToTopButton.classList.toggle(
            'hidden',
            window.scrollY <= 300 || isFooterVisible,
          )
        })
      }
    })
  </script>
</Layout>

<script>
  if (document.querySelector('.katex')) {
    if (!document.querySelector('link[href*="katex.min.css"]')) {
      const link = document.createElement('link')
      link.rel = 'stylesheet'
      link.href =
        'https://cdn.jsdelivr.net/npm/katex@0.16.22/dist/katex.min.css'
      document.head.appendChild(link)
    }
  }
</script>
