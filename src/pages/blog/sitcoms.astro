---
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import PostHead from '@/components/PostHead.astro'
import { badgeVariants } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import Layout from '@/layouts/Layout.astro'
import { parseAuthors } from '@/lib/data-utils'
import { formatDate } from '@/lib/utils'
import { Icon } from 'astro-icon/components'
import { getEntry } from 'astro:content'
import SitcomAccordion from '../../components/SitcomAccordion'

const post = await getEntry('blog', 'sitcoms')
if (!post) return Astro.redirect('/404')

const authors = await parseAuthors(post.data.authors ?? [])
---

<Layout>
  <PostHead slot="head" post={post} />

  <section class="grid grid-cols-[minmax(0px,1fr)_min(calc(var(--breakpoint-md)-2rem),100%)_minmax(0px,1fr)] gap-y-8 pb-16">
    <div class="col-start-2 pt-8 pb-6">
      <div class="flex items-center gap-3 text-sm text-muted-foreground mb-6 pb-4 border-b border-border/40">
        {authors.length > 0 && (
          <a href={`/authors/${authors[0].id}`} class="flex items-center gap-1.5 transition-colors">
            <Icon name="lucide:user" class="size-3.5" />
            <span>{authors[0].name}</span>
          </a>
        )}
        <span class="text-muted-foreground/40">•</span>
        <div class="flex items-center">
          <span>{formatDate(post.data.date)}</span>
        </div>
      </div>
      
      <h1 class="text-5xl font-bold text-foreground mb-4 tracking-tight">{post.data.title}</h1>
      <!-- <p class="text-xl text-muted-foreground leading-relaxed">{post.data.description}</p> -->
    </div>

    <article class="col-start-2 max-w-none prose dark:prose-invert prose-lg">
      <p>
        I LOVE SITCOMS, they’re easily my favorite form of media. I’ve watched them during lectures, while traveling, even while solving math problems. (To this day, whenever I see FRIENDS clips, I get flashbacks of 12th-grade integration.)
      </p>
      <p>
        I’ve watched sitcoms when I was happy, sad, angry, or bored. What I’m trying to say is — there’s never a bad time to watch one. They fill you with this comforting, familiar warmth.
      </p>
      <p>
        My perfect sitcom would be:
      </p>
      <ul>
        <li><strong>Comedy</strong> – It should generally focus on humor, but not the classic setup-and-punchline kind. More effortless, casual, or physical comedy (Two & a Half Men style), something that flows naturally.</li>
        <li><strong>Real moments</strong> – Mix in a few genuine, touching moments that make the show feel grounded, like How I Met Your Mother’s Robin talking to her kids or Ted’s lonely night at MacLaren’s and especially Barney's never-ending moment.</li>
        <li><strong>Romantic plot</strong> – A romance that improves the story without being the story itself, like Jim & Pam in The Office.</li>
      </ul>
      <p>
        I can’t really rank these shows by “quality,” since I’ve watched them at different stages of my life and they are all sooo good. Instead, I’ll try to order them by the impact they’ve had on me.
      </p>

      <SitcomAccordion client:only="react" />

      <p class="mt-12">
        If you strongly disagree with anything here, feel free to send me a message. For the smaller "meh, not quite" stuff, just keep it to yourself — this is mostly me sharing my own take.
      </p>
    </article>
  </section>

  <Button
    variant="outline"
    size="icon"
    className="group fixed right-8 bottom-8 z-50 hidden"
    id="scroll-to-top"
    title="Scroll to top"
    aria-label="Scroll to top"
  >
    <Icon name="lucide:arrow-up" class="mx-auto size-4 transition-all " />
  </Button>

  <script>
    document.addEventListener('astro:page-load', () => {
      const scrollToTopButton = document.getElementById('scroll-to-top')
      const footer = document.querySelector('footer')

      if (scrollToTopButton && footer) {
        scrollToTopButton.addEventListener('click', () => {
          window.scrollTo({ top: 0, behavior: 'smooth' })
        })

        window.addEventListener('scroll', () => {
          const footerRect = footer.getBoundingClientRect()
          const isFooterVisible = footerRect.top <= window.innerHeight
          scrollToTopButton.classList.toggle('hidden', window.scrollY <= 300 || isFooterVisible)
        })
      }
    })
  </script>
</Layout>
